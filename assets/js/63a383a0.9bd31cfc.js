"use strict";(self.webpackChunkdocs_pyrat=self.webpackChunkdocs_pyrat||[]).push([[19],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>u});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),s=p(r),u=a,b=s["".concat(l,".").concat(u)]||s[u]||d[u]||i;return r?n.createElement(b,o(o({ref:t},m),{},{components:r})):n.createElement(b,o({ref:t},m))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=s;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},6681:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:1},o="Interval Arithmetic",c={unversionedId:"benchmark/interval_arithmetic",id:"benchmark/interval_arithmetic",title:"Interval Arithmetic",description:"We test our implementation on a PC with following configurations:",source:"@site/docs/benchmark/interval_arithmetic.md",sourceDirName:"benchmark",slug:"/benchmark/interval_arithmetic",permalink:"/docs.pybdr/docs/benchmark/interval_arithmetic",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/benchmark/interval_arithmetic.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Benchmark",permalink:"/docs.pybdr/docs/category/benchmark"},next:{title:"High-dimensional Partial Derivative Based on Symbolic Computation",permalink:"/docs.pybdr/docs/benchmark/sym_derivative"}},l={},p=[{value:"Settings",id:"settings",level:2}],m={toc:p};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interval-arithmetic"},"Interval Arithmetic"),(0,a.kt)("p",null,"We test our implementation on a PC with following configurations:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"center"},"Hardware"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Detail"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"CPU"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Intel(R) Core(TM) i7-11800H CPU @ 2.30GHz (8 CPUs)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"Memory"),(0,a.kt)("td",{parentName:"tr",align:"center"},"16GB")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"GPU"),(0,a.kt)("td",{parentName:"tr",align:"center"},"RTX3060")))),(0,a.kt)("h2",{id:"settings"},"Settings"),(0,a.kt)("p",null,"Numerical and interval tensors of size ","[100,10,10]"," were randomly generated to compute the addition, subtraction,\nmultiplication and division and matrix multiplication operations supporting the broadcast mechanism, respectively, and\nthe running times and operations were recorded."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\nfrom pyrat.geometry import Interval\nfrom pyrat.util.functional import performance_counter_start, performance_counter\n\ntime_start = performance_counter_start()\n\na = Interval.rand(100, 100, 10) + Interval.rand(100, 100, 10)\nb = Interval.rand(100, 100, 10) - Interval.rand(100, 100, 10)\nc = Interval.rand(100, 100, 10) * Interval.rand(100, 100, 10)\nd = Interval.rand(100, 100, 10) / Interval.rand(100, 100, 10)\ne = Interval.rand(100, 100, 10) @ Interval.rand(100, 10, 10)\nf = Interval.rand(100, 100, 10) @ np.random.rand(10, 10)\n\nperformance_counter(time_start, 'interval arithmetic')\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"center"},"Error"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Time (second)"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"0"),(0,a.kt)("td",{parentName:"tr",align:"center"},"0.0022")))))}d.isMDXComponent=!0}}]);